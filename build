#!/usr/bin/env python
#
# The MIT License (MIT)

# Copyright (c) 2015 Mauro Rocchi

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from datetime import datetime
from distutils import dir_util
import os
import re

from markdown import Markdown
from pystache import Renderer

def urlize(title):
    return re.sub(r'[^a-zA-Z0-9]+', '-', title.lower().strip())

class Source:
    def __init__(self, root):
        self.root = root

    def get_all_names(self):
        return os.listdir(self.root)

    def read(self, name):
        with open(name, "r") as f:
            return f.read().decode('utf-8')

class Target:
    def __init__(self, root):
        self.root = root

    def write(self, filename, content):
        fullname = os.path.join(self.root, filename)
        fulldir, _ = os.path.split(fullname)
        dir_util.mkpath(fulldir)
        with open(fullname, "w") as f:
            f.write(content.encode('utf-8'))

class Post:
    def __init__(self, previewHtml, html, meta):
        self.previewHtml = previewHtml
        self.html = html
        self.title = ' '.join(meta['title'])
        self.date = datetime.strptime(' '.join(meta['date']), "%Y-%m-%d %H:%M")
        self.dateAsString = self.date.strftime("%d %B %Y")
        self.permalink = "/%d/%02d/%s.htm" % (self.date.year, self.date.month, urlize(self.title))
        self.hasMore = self.previewHtml != self.html
        self.visible = meta.get('ignore', 'false') == 'false'

class PostsRepository:
    def __init__(self, source):
        self.source = source

    def read_all(self):
        posts = filter(lambda p: p.visible, [self.read_post(name) for name in self.source.get_all_names()])
        posts.sort(key=lambda p: p.date, reverse=True)
        return posts

    def read_post(self, name):
        fullname = '_posts/%s' % name
        content = self.source.read(fullname)
        html = md.convert(content)
        meta = md.Meta
        more_index = content.find('<!-- more -->')
        if more_index == -1:
            preview_source = content
        else:
            preview_source = content[:more_index]
        preview_html = md.convert(preview_source)
        return Post(preview_html, html, meta)

class Page:
    def __init__(self, html, meta):
        self.html = html
        self.title = ' '.join(meta['title'])
        self.permalink = "/%s.htm" % (urlize(self.title))

class PagesRepository:
    def __init__(self, source):
        self.source = source

    def read_all(self):
        pages = [self.read_page(name) for name in self.source.get_all_names()]
        pages.sort(key=lambda p: p.title)
        return pages

    def read_page(self, name):
        fullname = '_pages/%s' % name
        content = self.source.read(fullname)
        html = md.convert(content)
        meta = md.Meta
        md.reset()
        return Page(html, meta)

class View:
    def __init__(self):
        self.renderer = Renderer(search_dirs='_views')

    def render(self, layout_name, view_name, context):
        title = context.title if hasattr(context, 'title') else None
        body = self.renderer.render_name(view_name, context)
        return self.renderer.render_name(layout_name, {
            'title': title,
            'body': body,
            'posts': posts,
            'pages': pages
        })

if __name__ == '__main__':
    md = Markdown(extensions=['extra', 'meta', 'codehilite'])
    posts = PostsRepository(Source('_posts')).read_all()
    pages = PagesRepository(Source('_pages')).read_all()
    view = View()
    target = Target('.')
    target.write('index.htm', view.render('layout_two_columns', 'index', {'posts': posts}))
    for post in posts:
        path = post.permalink[1:]
        target.write(path, view.render('layout_one_column', 'post', post))
    for page in pages:
        path = page.permalink[1:]
        target.write(path, view.render('layout_two_columns', 'page', page))
