<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Mauro Rocchi's Blog - While loops in a functional way</title>
    <link rel="stylesheet" type="text/css" href="/css/pygments.css"/>
    <link rel="stylesheet" type="text/css" href="/css/theme.css"/>
    <link rel="icon" href="/favicon.png" type="image/png"/>

    <!-- Google Analytics -->
    <script type="text/javascript">
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
      ga('create', 'UA-38190103-1', 'auto');
      ga('send', 'pageview');
    </script>
</head>

<body><header class="title">
    <h1><a href="/">Mauro Rocchi's Blog</a></h1>
    <h2>Programming in Action</h2>
</header>
<article class="content">
    <header>
        <h1>While loops in a functional way</h1>
        <div class="meta">Written by <strong>Mauro Rocchi</strong> on 24 March 2015</div>
    </header>

    <p>The following code shows a technique to implement while loops taking advantage of java streams and functional programming.</p>
<h2>Do/while loops</h2>
<p>This is a classic do/while loop where the body is essentially a supplier of states:</p>
<div class="codehilite"><pre><span class="n">T</span> <span class="n">state</span><span class="o">;</span>
<span class="k">do</span> <span class="o">{</span>
    <span class="n">state</span> <span class="o">=</span> <span class="n">body</span><span class="o">();</span>
<span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">predicate</span><span class="o">(</span><span class="n">state</span><span class="o">));</span>
</pre></div>


<p>It is equivalent to the following code:</p>
<div class="codehilite"><pre><span class="kd">final</span> <span class="n">T</span> <span class="n">endState</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
    <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">predicate</span><span class="o">.</span><span class="na">negate</span><span class="o">())</span>
    <span class="o">.</span><span class="na">findFirst</span><span class="o">()</span>
    <span class="o">.</span><span class="na">get</span><span class="o">();</span>
</pre></div>


<p>The stream will terminate when the current generated value hold the predicate in the filter clause, therefore such clause - used in this way - behaves as an "until" condition and must be negated.</p>
<p>The stream is consumed invoking <code>findFirst</code>, at that point can happend two things:</p>
<ol>
<li>the stream terminates: <code>findFirst</code> returns an <code>Optional</code> containing the last state checked by the predicate, so the last state is always available;</li>
<li>the stream doesn't terminate: unfortunately there's an infinite loop!</li>
</ol>
<h2>Stateful while loops</h2>
<p>Sometimes the current state of a while loop depends from the previous state:</p>
<div class="codehilite"><pre><span class="n">T</span> <span class="n">state</span> <span class="o">=</span> <span class="n">initial</span><span class="o">;</span>
<span class="k">while</span> <span class="o">(</span><span class="n">predicate</span><span class="o">(</span><span class="n">state</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">state</span> <span class="o">=</span> <span class="n">body</span><span class="o">(</span><span class="n">state</span><span class="o">);</span>
<span class="o">}</span>
</pre></div>


<p>The equivalent functional code is similar to the previous but it uses <code>iterate</code> to generate a chain of dependent states:</p>
<div class="codehilite"><pre><span class="kd">final</span> <span class="n">T</span> <span class="n">endState</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">iterate</span><span class="o">(</span><span class="n">initial</span><span class="o">,</span> <span class="n">body</span><span class="o">)</span>
    <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">predicate</span><span class="o">.</span><span class="na">negate</span><span class="o">())</span>
    <span class="o">.</span><span class="na">findFirst</span><span class="o">()</span>
    <span class="o">.</span><span class="na">get</span><span class="o">()</span>
</pre></div>


<h2>A little example</h2>
<p>As a demonstration, suppose you have started a task to a remote service and you want monitor the operation getting the task status in polling. You want read the status with 10 tentatives before to declare the operation failed too.</p>
<p>An imperative solution:</p>
<div class="codehilite"><pre><span class="n">Outcome</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">State</span> <span class="n">state</span><span class="o">;</span>
    <span class="k">do</span> <span class="o">{</span>
        <span class="n">state</span> <span class="o">=</span> <span class="n">getTaskState</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">isCompleted</span><span class="o">(</span><span class="n">state</span><span class="o">));</span>
    <span class="k">return</span> <span class="n">state</span><span class="o">.</span><span class="na">success</span> <span class="o">?</span> <span class="n">SUCCESS</span> <span class="o">:</span> <span class="n">FAILURE</span><span class="o">;</span>
<span class="o">}</span>

<span class="n">State</span> <span class="nf">getTaskState</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">attempt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">do</span> <span class="o">{</span>
        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">readEffectiveTaskStatus</span><span class="o">(...);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// log</span>
        <span class="o">}</span>
        <span class="n">attempt</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">attempt</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">State</span><span class="o">.</span><span class="na">failure</span><span class="o">();</span>
<span class="o">}</span>
</pre></div>


<p>A functional alternative:</p>
<div class="codehilite"><pre><span class="n">Outcome</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="n">State</span> <span class="n">state</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">getTaskState</span><span class="o">)</span>
        <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">isCompleted</span><span class="o">)</span>
        <span class="o">.</span><span class="na">findFirst</span><span class="o">()</span>
        <span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">state</span><span class="o">.</span><span class="na">success</span> <span class="o">?</span> <span class="n">SUCCESS</span> <span class="o">:</span> <span class="n">FAILURE</span><span class="o">;</span>
<span class="o">}</span>

<span class="n">State</span> <span class="nf">getTaskState</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">readEffectiveTaskStatus</span><span class="o">)</span>
        <span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
        <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">Optional</span><span class="o">::</span><span class="n">isPresent</span><span class="o">)</span>
        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">Optional</span><span class="o">::</span><span class="n">get</span><span class="o">)</span>
        <span class="o">.</span><span class="na">findFirst</span><span class="o">()</span>
        <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="n">State</span><span class="o">.</span><span class="na">failure</span><span class="o">());</span>
<span class="o">}</span>

<span class="n">Optional</span><span class="o">&lt;</span><span class="n">State</span><span class="o">&gt;</span> <span class="nf">readEffectiveTaskStatus</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(...);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>

    <!-- AddThis Button BEGIN -->
    <div class="addthis_toolbox addthis_default_style addthis_16x16_style">
    <a class="addthis_button_facebook"></a>
    <a class="addthis_button_twitter"></a>
    <a class="addthis_button_google_plusone_share"></a>
    <a class="addthis_button_email"></a>
    <a class="addthis_button_compact"></a><a class="addthis_counter addthis_bubble_style"></a>
    </div>
    <script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5231b03d468cf7fd"></script>
    <!-- AddThis Button END -->
</article>

<div id="disqus_thread"></div>
<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'maurocchi';
    var disqus_identifier = '/2015/03/while-loops-in-a-functional-way.htm';

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments</a>.</noscript>

<footer>
    This content is distributed with 
    <a href="http://creativecommons.org/licenses/by-sa/4.0/">
    Creative Commons Attribution-ShareAlike 4.0 International Public License</a>.
    <a href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="/images/license.png" />
    </a>
</footer>

</body>
</html>