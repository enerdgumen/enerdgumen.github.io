<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Mauro Rocchi's Blog</title>
    <link rel="stylesheet" type="text/css" href="/css/pygments.css"/>
    <link rel="stylesheet" type="text/css" href="/css/theme.css"/>
    <link rel="icon" href="/favicon.png" type="image/png"/>

    <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-38190103-1']);
    _gaq.push(['_trackPageview']);

    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
    </script>
</head>

<body>
<aside id="sidebar">
    <header class="title">
        <h1><a href="/">Mauro Rocchi's Blog</a></h1>
        <h2>Programming in Action</h2>
    </header>

    <section class="pages">
        <h1>Pages</h1>
        <ul>
            <li><a href="/about.htm">About</a></li>
            <li><a xmlns:cc="http://creativecommons.org/ns#" href="https://github.com/maurocchi" property="cc:attributionName" rel="cc:attributionURL">Open source</a></li>
        </ul>
    </section>

    <section class="posts">
        <h1>Recent posts</h1>
        <ul>
            <li><a href="/2013/04/playing-with-haskell.htm">Playing with Haskell</a></li>
            <li><a href="/2013/02/monitoring-logs-with-sauron.htm">Monitoring logs with Sauron</a></li>
            <li><a href="/2013/01/introduction-to-emaze-dysfunctional.htm">Introduction to Emaze Dysfunctional</a></li>
        </ul>
    </section>
</aside>

<section id="container">
<article class="content">
    <header>
        <h1><a href="/2013/04/playing-with-haskell.htm">Playing with Haskell</a></h1>
        <div class="meta">Written by <strong>Mauro Rocchi</strong> on 15 April 2013</div>
    </header>

    <p>Have you ever written a program to calculate the symbolic <a href="http://en.wikipedia.org/wiki/Derivative">derivative</a> for a given function? I've tried to solve this problem with Haskell and the result is very simple and smart.</p>
<p>First at all, let's define the data structures representing the math terms:</p>
<div class="codehilite"><pre><span class="kr">data</span> <span class="kt">Term</span> <span class="ow">=</span> <span class="kt">Const</span> <span class="kt">Integer</span> <span class="o">|</span> <span class="kt">Variable</span> <span class="kt">String</span> <span class="o">|</span>
            <span class="kt">Add</span> <span class="kt">Term</span> <span class="kt">Term</span> <span class="o">|</span> <span class="kt">Mul</span> <span class="kt">Term</span> <span class="kt">Term</span> <span class="o">|</span>
            <span class="kt">Div</span> <span class="kt">Term</span> <span class="kt">Term</span> <span class="o">|</span> <span class="kt">Pow</span> <span class="kt">Term</span> <span class="kt">Term</span> <span class="o">|</span>
            <span class="kt">Sin</span> <span class="kt">Term</span> <span class="o">|</span> <span class="kt">Cos</span> <span class="kt">Term</span> <span class="o">|</span> <span class="kt">Tan</span> <span class="kt">Term</span> <span class="o">|</span> <span class="kt">Ln</span> <span class="kt">Term</span>
  <span class="kr">deriving</span><span class="p">(</span><span class="kt">Eq</span><span class="p">)</span>
</pre></div>


<p>Assuming to have the functions <code>add x y</code>, <code>mul x y</code>, etc., we can define the derivative functions implementing the math rules:</p>
<div class="codehilite"><pre><span class="nf">derive</span> <span class="p">(</span><span class="kt">Variable</span> <span class="n">u</span><span class="p">)</span> <span class="p">(</span><span class="kt">Variable</span> <span class="n">v</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Const</span> <span class="p">(</span><span class="kr">if</span> <span class="n">u</span> <span class="o">==</span> <span class="n">v</span> <span class="kr">then</span> <span class="mi">1</span> <span class="kr">else</span> <span class="mi">0</span><span class="p">)</span>
<span class="nf">derive</span> <span class="p">(</span><span class="kt">Const</span> <span class="kr">_</span><span class="p">)</span> <span class="kr">_</span> <span class="ow">=</span> <span class="n">zero</span>
<span class="nf">derive</span> <span class="p">(</span><span class="kt">Add</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span> <span class="n">v</span> <span class="ow">=</span> <span class="n">add</span> <span class="p">(</span><span class="n">derive</span> <span class="n">x</span> <span class="n">v</span><span class="p">)</span> <span class="p">(</span><span class="n">derive</span> <span class="n">y</span> <span class="n">v</span><span class="p">)</span>
<span class="nf">derive</span> <span class="p">(</span><span class="kt">Mul</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span> <span class="n">v</span> <span class="ow">=</span> <span class="n">add</span> <span class="p">(</span><span class="n">mul</span> <span class="p">(</span><span class="n">derive</span> <span class="n">x</span> <span class="n">v</span><span class="p">)</span> <span class="n">y</span><span class="p">)</span> <span class="p">(</span><span class="n">mul</span> <span class="n">x</span> <span class="p">(</span><span class="n">derive</span> <span class="n">y</span> <span class="n">v</span><span class="p">))</span>
<span class="nf">derive</span> <span class="p">(</span><span class="kt">Pow</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span> <span class="n">v</span> <span class="ow">=</span> <span class="n">mul</span> <span class="p">(</span><span class="n">mul</span> <span class="n">y</span> <span class="p">(</span><span class="n">pow</span> <span class="n">x</span> <span class="p">(</span><span class="n">sub</span> <span class="n">y</span> <span class="n">one</span><span class="p">)))</span> <span class="p">(</span><span class="n">derive</span> <span class="n">x</span> <span class="n">v</span><span class="p">)</span>
<span class="nf">derive</span> <span class="p">(</span><span class="kt">Div</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span> <span class="n">v</span> <span class="ow">=</span> <span class="n">divide</span> <span class="p">(</span><span class="n">sub</span> <span class="p">(</span><span class="n">mul</span> <span class="p">(</span><span class="n">derive</span> <span class="n">x</span> <span class="n">v</span><span class="p">)</span> <span class="n">y</span><span class="p">)</span> <span class="p">(</span><span class="n">mul</span> <span class="n">x</span> <span class="p">(</span><span class="n">derive</span> <span class="n">y</span> <span class="n">v</span><span class="p">)))</span> <span class="p">(</span><span class="n">pow</span> <span class="n">y</span> <span class="n">two</span><span class="p">)</span>
<span class="nf">derive</span> <span class="p">(</span><span class="kt">Sin</span> <span class="n">x</span><span class="p">)</span>   <span class="n">v</span> <span class="ow">=</span> <span class="n">mul</span> <span class="p">(</span><span class="n">cos</span> <span class="n">x</span><span class="p">)</span> <span class="p">(</span><span class="n">derive</span> <span class="n">x</span> <span class="n">v</span><span class="p">)</span>
<span class="nf">derive</span> <span class="p">(</span><span class="kt">Cos</span> <span class="n">x</span><span class="p">)</span>   <span class="n">v</span> <span class="ow">=</span> <span class="n">mul</span> <span class="p">(</span><span class="n">neg</span> <span class="p">(</span><span class="n">sin</span> <span class="n">x</span><span class="p">))</span> <span class="p">(</span><span class="n">derive</span> <span class="n">x</span> <span class="n">v</span><span class="p">)</span>
<span class="nf">derive</span> <span class="p">(</span><span class="kt">Tan</span> <span class="n">x</span><span class="p">)</span>   <span class="n">v</span> <span class="ow">=</span> <span class="n">derive</span> <span class="p">(</span><span class="kt">Div</span> <span class="p">(</span><span class="n">sin</span> <span class="n">x</span><span class="p">)</span> <span class="p">(</span><span class="n">cos</span> <span class="n">x</span><span class="p">))</span> <span class="n">v</span>
<span class="nf">derive</span> <span class="p">(</span><span class="kt">Ln</span> <span class="n">x</span><span class="p">)</span>    <span class="n">v</span> <span class="ow">=</span> <span class="n">mul</span> <span class="p">(</span><span class="n">inv</span> <span class="n">x</span><span class="p">)</span> <span class="p">(</span><span class="n">derive</span> <span class="n">x</span> <span class="n">v</span><span class="p">)</span>
</pre></div>

    <div class="more">
        <a href="/2013/04/playing-with-haskell.htm">(more...)</a>
    </div>
</article><article class="content">
    <header>
        <h1><a href="/2013/02/monitoring-logs-with-sauron.htm">Monitoring logs with Sauron</a></h1>
        <div class="meta">Written by <strong>Mauro Rocchi</strong> on 13 February 2013</div>
    </header>

    <p><a href="http://github.com/maurocchi/sauron">Sauron</a> is a simple self-contained <em>Python</em> 2.3 script, without any dependency, useful to monitor errors on log files in real time from the command-line.</p>
<p>By default it follows all log files in <code>/var/log</code> directory and shown the rows containing an "error" word (bad, cannot, error, exception, fail, fails, failed, failure, incorrect, invalid, unable, unexpected, wrong).</p>
<div class="codehilite"><pre><span class="nv">$ </span>sauron <span class="o">[</span>options<span class="o">]</span> <span class="o">[</span>paths <span class="o">(</span>default /var/log<span class="o">)]</span>

Options:
    -h, --help            show this <span class="nb">help </span>message and <span class="nb">exit</span>
    -f FILENAME_REGEX, --files<span class="o">=</span>FILENAME_REGEX
                          filename regex <span class="o">(</span>default <span class="s1">&#39;log$&#39;</span><span class="o">)</span>
    -a, --all             the log file are followed from the begin
    -w WORDS, --words<span class="o">=</span>WORDS
                          comma-separed words which filters the lines <span class="o">(</span>default:
                          error, exception, fail, fails, failed, failure,
                          cannot, unable, unexpected, incorrect, invalid, bad,
                          wrong<span class="o">)</span>
    -r LINE_REGEX, --regex<span class="o">=</span>LINE_REGEX
                          regex to filter the log lines <span class="o">(</span>it overwrites the
                          --words option<span class="o">)</span>
    -i CHECK_INTERVAL, --interval<span class="o">=</span>CHECK_INTERVAL
                          interval in seconds before to scan again the paths
                          <span class="o">(</span>default 1<span class="o">)</span>
    --version
</pre></div>

</article><article class="content">
    <header>
        <h1><a href="/2013/01/introduction-to-emaze-dysfunctional.htm">Introduction to Emaze Dysfunctional</a></h1>
        <div class="meta">Written by <strong>Mauro Rocchi</strong> on 22 January 2013</div>
    </header>

    <p><a href="https://bitbucket.org/emaze/emaze-dysfunctional">Emaze Dysfunctional</a> is a Java library providing the support for the functional programming, released by <a href="http://emaze.net">Emaze Networks</a> under BSD license. Developed in accordance with <a href="http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29">solid principles</a> of OOP, it's distinguished from other similar libraries for simplicity, robustness and high reusability of its components.</p>
<p>I will describe the main features of the current version 5.2 through some demonstrative examples, taken from the "classical" literature.</p>
<h2>Quicksort</h2>
<p>The following fragment implements the <a href="http://en.wikipedia.org/wiki/Quicksort">quicksort</a> algorithm, choosing, for simplicity, the first item as the pivot.</p>
<div class="codehilite"><pre><span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">quicksort</span><span class="o">(</span><span class="n">Iterator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">items</span><span class="o">,</span> <span class="n">BinaryPredicate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">order</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">items</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">items</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">final</span> <span class="n">T</span> <span class="n">head</span> <span class="o">=</span> <span class="n">items</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
    <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">Consumers</span><span class="o">.</span><span class="na">all</span><span class="o">(</span><span class="n">items</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">Multiplexing</span><span class="o">.</span><span class="na">chain</span><span class="o">(</span>
            <span class="n">quicksort</span><span class="o">(</span><span class="n">Filtering</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="n">Dispatching</span><span class="o">.</span><span class="na">rcurry</span><span class="o">(</span><span class="n">order</span><span class="o">,</span> <span class="n">head</span><span class="o">)),</span> <span class="n">order</span><span class="o">),</span>
            <span class="n">Iterations</span><span class="o">.</span><span class="na">iterator</span><span class="o">(</span><span class="n">head</span><span class="o">),</span>
            <span class="n">quicksort</span><span class="o">(</span><span class="n">Filtering</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="n">Logic</span><span class="o">.</span><span class="na">not</span><span class="o">(</span><span class="n">Dispatching</span><span class="o">.</span><span class="na">rcurry</span><span class="o">(</span><span class="n">order</span><span class="o">,</span> <span class="n">head</span><span class="o">))),</span> <span class="n">order</span><span class="o">));</span>
<span class="o">}</span>
</pre></div>


<p>The function, in addition to the iterator with the items to sort, takes an argument of type <code>BinaryPredicate</code>, one of several <a href="http://en.wikipedia.org/wiki/Function_object">functors</a> provided by the library. It belong to the predicates family, that is those functions that return a boolean value. The "binary" prefix means that it's a predicate with ariety 2, infact it receives two values and retorns <em>true</em> if these are in order.</p>
<p>The available functors, intended to become your best friends, in order of arity (from 0 to 3) are: </p>
<ul>
<li><strong>Procedures</strong>: <code>java.lang.Runnable</code> (from the standard library), <code>Action</code>, <code>BinaryAction</code> e <code>TernaryAction</code>;</li>
<li><strong>Predicates</strong>: <code>Proposition</code>, <code>Predicate</code>, <code>BinaryPredicate</code>, <code>TernaryPredicate</code>;</li>
<li><strong>Generics</strong>: <code>Provider</code>, <code>Delegate</code>, <code>BinaryDelegate</code>, <code>TernaryDelegate</code>.</li>
</ul>
<p>As you can see a <code>QuadruplePredicate</code> doesn't exist, indeed <em>Dysfunctional</em> is developed following the <em>one, two, three, too many!</em> principle. If you need a fourth parameter, probably, or there are some design errors, or it could be the case of grouping related parameters into a container object.</p>

    <div class="more">
        <a href="/2013/01/introduction-to-emaze-dysfunctional.htm">(more...)</a>
    </div>
</article>
</section>

<footer>
    This content is distributed with 
    <a href="http://creativecommons.org/licenses/by-sa/4.0/">
    Creative Commons Attribution-ShareAlike 4.0 International Public License</a>.
    <a href="http://creativecommons.org/licenses/by-sa/4.0/">
        <img alt="Creative Commons License" style="border-width:0" src="/images/license.png" />
    </a>
</footer>

</body>
</html>